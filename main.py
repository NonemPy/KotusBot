import disnake
from disnake.ext import commands
import time
import aiofiles
from enum import Enum
import random
from disnake.enums import ButtonStyle
import asyncio

#   EDITABLE THINGS ‚Üì

bottoken = "—Ç—É—Ç —Ç–æ–∫–µ–Ω"

defaultembedcolor = disnake.Colour.green()

defaulterrorembedcolor = disnake.Colour.red()

#   EDITABLE THINGS ‚Üë



intents = disnake.Intents.all()

Bot = commands.Bot(
    command_prefix=disnake.ext.commands.when_mentioned,
    intents=intents,
    activity=disnake.Activity(type=disnake.ActivityType.watching, name="Alexsovi by NonemPy#0001")
)


Bot.warnings = {}

hug_gifs = [
    'https://media.giphy.com/media/lrr9rHuoJOE0w/giphy.gif',
    'https://media.giphy.com/media/od5H3PmEG5EVq/giphy.gif'
]

kiss_gifs = [
    'https://media.giphy.com/media/G3va31oEEnIkM/giphy.gif'
]

roles = {
    "Red": "1052714857113325589",
    "Orange": "1052714932761808949",
    "Yellow": "1052715015062442137",
    "Blue": "1052715229475246110"
}

@Bot.slash_command(name="role", description="–í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å")
async def role(ctx, role_name: str):
    member = ctx.author
    guild = ctx.guild

    role_id = roles.get(role_name)

    if role_id:
        role = disnake.utils.get(guild.roles, id=int(role_id))

        if role:
            if role in member.roles:
                await member.remove_roles(role)
                await ctx.send(f"–†–æ–ª—å {role.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await member.add_roles(role)
                await ctx.send(f"–†–æ–ª—å {role.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–æ–ª–∏.")
    else:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ä–æ–ª–∏.")



@Bot.slash_command()
async def —Ä–∞–∑—Ä–∞–±(interaction: disnake.AppCmdInter):
    await interaction.send("–≤—ã –ø–æ–ª—É—á–∏—Ç–µ  –∑–Ω–∞—á–æ–∫   —Ä–∞–∑—Ä–∞–±–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ ")

log_channel_id = 1052515982847004723  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤


@Bot.event
async def on_voice_state_update(member, before, after):
    if before.channel != after.channel:
        if after.channel:
            await log_channel.send(f"{member.name} –∑–∞—à–µ–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª {after.channel.name}.")
        else:
            await log_channel.send(f"{member.name} –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {before.channel.name}.")

@Bot.event
async def on_message_edit(before, after):
    await log_channel.send(f"–°–æ–æ–±—â–µ–Ω–∏–µ {before.author.name} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: `{before.content}` -> `{after.content}`")

@Bot.event
async def on_message_delete(message):
    await log_channel.send(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.author.name} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ: `{message.content}`")

@Bot.event
async def on_member_join(member):
    await log_channel.send(f"{member.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")

@Bot.event
async def on_member_remove(member):
    await log_channel.send(f"{member.name} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.")

@Bot.event
async def on_member_ban(guild, user):
    await log_channel.send(f"{user.name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}.")

@Bot.event
async def on_member_unban(guild, user):
    await log_channel.send(f"{user.name} –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}.")




@Bot.event
async def on_ready():
    
    for guild in Bot.guilds:
        Bot.warnings[guild.id] = {}
        
        async with aiofiles.open(f"warnings/{guild.id}.txt", mode="a") as temp:
            pass

        async with aiofiles.open(f"warnings/{guild.id}.txt", mode="r") as file:
            lines = await file.readlines()

            for line in lines:
                data = line.split(" ")
                member_id = int(data[0])
                admin_id = int(data[1])
                pointintime = int(data[2])
                reason = " ".join(data[3:]).strip("\n")

                try:
                    Bot.warnings[guild.id][member_id][0] += 1
                    Bot.warnings[guild.id][member_id][1].append((admin_id, pointintime, reason))

                except KeyError:
                    Bot.warnings[guild.id][member_id] = [1, [(admin_id, pointintime, reason)]] 
    
    
    print(f'Logged in as "{Bot.user}" ‚úî')

@Bot.slash_command()
async def kiss(self, inter, member:disnake.Member):
        gifs = [
            "https://tenor.com/ru/view/kiss-gif-22640695",
            "https://tenor.com/ru/view/kiss-hug-heart-love-gif-26161529",
            "https://tenor.com/ru/view/kiss-love-good-morning-gif-23457871"
        ]
        gif = random.choice(gifs)
        embed = disnake.Embed(title="Kiss", description=f"{ctx.author.mention} kisses someone!", color=discord.Color.blurple())
        embed.set_image(url=gif)

@Bot.slash_command(name="clear", usage=f"clear [amount]")
@commands.has_permissions(manage_messages=True)
async def clear(ctx, amount: int):
    await ctx.channel.purge(limit=amount + 1)
    emb = disnake.Embed(
    description=f"{ctx.author.mention} –æ—á–∏—Å—Ç–∏–ª {amount} —Å–æ–æ–±—â–µ–Ω–∏–π")
    await ctx.send(embed=emb)

@Bot.slash_command()
async def hug(self, inter, member:disnake.Member):
        gifs = [
            "https://media.giphy.com/media/lrr9rHuoJOE0w/giphy.gif",
            "https://media.giphy.com/media/od5H3PmEG5EVq/giphy.gif"
        ]
        gif = random.choice(gifs)
        embed = disnake.Embed(title="Hug", description=f"{ctx.author.mention} gives someone a hug!", color=discord.Color.blurple())
        embed.set_image(url=gif)

@Bot.slash_command(name = 'shar', description = '–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞.', usage = '—à–∞—Ä –í–æ–ø—Ä–æ—Å')
async def —à–∞—Ä(self, inter, *, question):
        responses = [
            '–≠—Ç–æ —Ç–æ—á–Ω–æ üëå',
            '–û—á–µ–Ω—å –¥–∞–∂–µ –≤—Ä—è–¥-–ª–∏ ü§®',
            '–ù–µ—Ç ‚ùå',
            '–î–∞, –±–µ–∑—É—Å–ª–æ–≤–Ω–æ ‚úî',
            '–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ üëå',
            '–í–µ—Ä–æ—è—Ç–Ω–æ ü§®',
            '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ —Ö–æ—Ä–æ—à–∞—è ü§î',
            '–î–∞ ‚úî',
            '–ó–Ω–∞–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –¥–∞ üëç',
            '–û—Ç–≤–µ—Ç —Ç—É–º–∞–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üëÄ',
            '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ üëÄ',
            '–õ—É—á—à–µ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–µ–π—á–∞—Å ü•µ',
            '–ù–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å–µ–π—á–∞—Å üëæ',
            '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ —Å–Ω–æ–≤–∞ ü§®',
            '–ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–∞ —ç—Ç–æ üôâ',
            '–ú–æ–π –æ—Ç–≤–µ—Ç - –ù–µ—Ç üòï',
            '–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç –Ω–µ—Ç ü§®',
            '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å üïµÔ∏è‚Äç‚ôÇÔ∏è',
            '–û—á–µ–Ω—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ ü§î'
        ]
        embed = disnake.Embed(
            description=f'üé± 8ball', 
            timestamp=inter.created_at
        )
        embed.add_field(name=f'**–í–æ–ø—Ä–æ—Å –æ—Ç {inter.author}:**', value=question, inline=True)
        embed.add_field(name='**–û—Ç–≤–µ—Ç: **', value=random.choice(responses), inline=False)
        embed.set_thumbnail(url=inter.author.display_avatar.url)
        await inter.response.send_message(embed=embed)

    
@Bot.event
async def on_guild_join(guild):
    Bot.warnings[guild.id] = {}(nult_member_permissions=disnake.Permissions(moderate_members=True))
async def moderation(inter):
    pass

    name='ban',
    description='–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'

async def slash_ban(ctx, user: disnake.User, reason: str = None):
    if not ctx.author.guild_permissions.ban_members:
        await ctx.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    if reason is None:
        reason = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

    await ctx.guild.ban(user, reason=reason)
    await ctx.send(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}.')

@Bot.slash_command(
    name='kick',
    description='–í—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
)
async def slash_kick(ctx, user: disnake.Member, reason: str = None):
    if not ctx.author.guild_permissions.kick_members:
        await ctx.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    if reason is None:
        reason = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

    await user.kick(reason=reason)
    await ctx.send(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –±—ã–ª –≤—ã–≥–Ω–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}.')

@Bot.slash_command(
    name='mute',
    description='–í—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
)
async def slash_mute(ctx, user: disnake.Member, duration: int = None, reason: str = None):
    if not ctx.author.guild_permissions.manage_roles:
        await ctx.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    role = disnake.utils.get(ctx.guild.roles, name='Muted')
    if role is None:
        await ctx.send('–†–æ–ª—å Muted –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.')
        return

    if duration is None:
        duration = 0

    if reason is None:
        reason = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'

    await user.add_roles(role, reason=reason)
    await ctx.send(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {duration} –º–∏–Ω—É—Ç(—ã). –ü—Ä–∏—á–∏–Ω–∞: {reason}.')



@Bot.slash_command(
    name='warn',
    description='–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
)
async def slash_warn(ctx):
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã warn
    pass

@Bot.slash_command(
    name='delete_warn',
    description='–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
)
async def slash_delete_warn(ctx):
    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã delete_warn
    pass


@Bot.event
async def on_member_update(before, after):
    guild = after.guild
    channel_id = 1052515982847004723  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞

    if after.guild != guild:
        return

    if before.display_name != after.display_name:
        channel = bot.get_channel(channel_id)
        await channel.send(f'Member {after.mention} changed their nickname: {before.display_name} -> {after.display_name}')

@Bot.event
async def on_message_delete(message):
    guild = message.guild
    channel_id = 1052515982847004723  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞

    if message.guild != guild:
        return

    channel = Bot.get_channel(channel_id)
    await channel.send(f'—É–¥–∞–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ #{message.channel.name}: {message.author.mention}: {message.content}')

@Bot.event
async def on_message_edit(before, after):
    guild = before.guild
    channel_id = 1052515982847004723  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∂—É—Ä–Ω–∞–ª –∞—É–¥–∏—Ç–∞

    if before.guild != guild:
        return

    channel = Bot.get_channel(channel_id)
    await channel.send(f'–°–æ–æ–±—â–µ–Ω–∏–µ #{before.channel.name} –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {before.author.mention}\n'
                       f'–°—Ç–∞—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: `{before.content}`\n'
                       f'–ù–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: `{after.content}`')





@Bot.slash_command(
    name="say",
    description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞."
)
@commands.has_permissions(manage_messages=True)
async def say(ctx, *, message):
    await ctx.send(message)
        
@Bot.slash_command(name="rules1", description="Help for commands")
async def help(inter):
    embed = disnake.Embed (
        title="RULES",
        description=f'–ø—Ä–∞–≤–∏–ª–∞ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞',
        colour = defaultembedcolor
    )
    
    embed.add_field(name="1.1", value="—Ñ–ª—É–¥", inline=False)
    embed.add_field(name="1.2", value="–æ—Ñ—Ñ—Ç–æ–ø", inline=False)
    embed.add_field(name="1.3", value="–ù–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ —Å—Ä–∞—á–µ–π –≤ —á–∞—Ç–µ", inline=False)
    embed.add_field(name="2.1", value="–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è —Ä–æ–¥–Ω—ã—Ö –≤ –ª—é–±–æ–º –≤–∏–¥–µ", inline=False)
    embed.add_field(name="2.2", value="–ù–µ–º–µ—Ü–∫–∞—è —Å–≤–∞—Å—Ç–∏–∫–∞ –≤ –ª—é–±–æ–º –≤–∏–¥–µ", inline=False)
    embed.add_field(name="2.3", value="–ü—É–±–ª–∏–∫–∞—Ü–∏—è nsfw –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —à–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ø–æ—Å–æ–±–Ω–æ–≥–æ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å –ø—Å–∏—Ö–∏–∫–µ —á–µ–ª–æ–≤–µ–∫–∞", inline=False)
    embed.add_field(name="2.4", value="—Ä–µ–∫–ª–∞–º–∞",inline=False)
    embed.add_field(name="2.5", value="–°–ª–∏–≤ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ–∑ –∏–∑ —Å–æ–≥–ª–∞—Å–∏—è ( –¥–∏–∞–Ω–æ–Ω—ã )",inline=False)
      
        

        
    
    
@Bot.slash_command(default_member_permissions=disnake.Permissions(moderate_members=True))
async def user(inter):
    pass
@user.sub_command(name="info", description="See information about a member")
async def info(inter, member:disnake.Member):
    
    for guild in Bot.guilds:
        Bot.warnings[guild.id] = {}
        
        async with aiofiles.open(f"warnings/{guild.id}.txt", mode="a") as temp:
            pass

        async with aiofiles.open(f"warnings/{guild.id}.txt", mode="r") as file:
            lines = await file.readlines()

            for line in lines:
                data = line.split(" ")
                member_id = int(data[0])
                admin_id = int(data[1])
                pointintime = int(data[2])
                reason = " ".join(data[3:]).strip("\n")

                try:
                    Bot.warnings[guild.id][member_id][0] += 1
                    Bot.warnings[guild.id][member_id][1].append((admin_id, pointintime, reason))

                except KeyError:
                    Bot.warnings[guild.id][member_id] = [1, [(admin_id, pointintime, reason)]] 
    
    
    date_time = str(member.created_at)
    
    cut_date_time = date_time[0:19]
    
    pattern = '%Y-%m-%d %H:%M:%S'
    epoch = int(time.mktime(time.strptime(cut_date_time, pattern)))
    
    try:
        count = Bot.warnings[inter.guild.id][member.id][0]
    except KeyError:
        count = "0"
    
    embed = disnake.Embed(
        title="User Info",
        color=defaultembedcolor
    )
    
    embed.set_author(
        name=str(member.name+"#"+member.discriminator),
    )
    
    embed.set_thumbnail(
        url=member.avatar.url if member.avatar else disnake.Embed.Empty 
    )
    
    embed.add_field(name="Username", value=str('`'+member.name+"#"+member.discriminator+'`'), inline=True)
    embed.add_field(name="Nickname", value=str('`'+member.display_name+'`'), inline=True)
    embed.add_field(name="User ID", value=str('`'+str(member.id)+'`'), inline=False)
    embed.add_field(name="Is bot?", value=str('`'+str(member.bot)+'`'), inline=True)
    embed.add_field(name="Created at", value=f"<t:{str(epoch)}:f>", inline=False)
    embed.add_field(name="Warnings", value='`'+str(count)+'`', inline=False)
    
    await inter.send(embed=embed)
    
    
    
@Bot.slash_command(name="help", description="Help for moderation commands")
async def help(inter):
    
    embed = disnake.Embed (
        title="FQQDs Moderation Bot - Moderation Help",
        description=f'Here you can find some help for every moderation command.\nMembers are notified per direct message for every action\nFor every moderation command the "Moderate Members" permission is required',
        colour = defaultembedcolor
    )
    
    embed.add_field(name="/moderation ban", value="Ban members (Use Discord intern feature for message removal)", inline=False)
    embed.add_field(name="/moderation kick", value="Kick members", inline=False)
    embed.add_field(name="/moderation warn", value="Warn members", inline=False)
    embed.add_field(name="/moderation warnings", value="See all warnings of a member", inline=False)
    embed.add_field(name="/moderation removewarnings", value="Remove warnings of a member", inline=False)
    embed.add_field(name="/user info", value="See information about a member", inline=False)
    
    
    await inter.send(embed=embed)

@Bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandInvokeError):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    elif isinstance(error, commands.CommandNotFound):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        await ctx.send("–£–∫–∞–∑–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    

@commands.Cog.listener()
async def on_command_error(self, inter, error):
        print(error)

        if isinstance(error, commands.MissingPermissions):
            embed = disnake.Embed( title = '–û—à–∏–±–∫–∞!', description = f'{inter.author.mention}, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!', colour = botmaincolor)
            embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
            await inter.send(embed = embed)

        if isinstance(error, commands.CommandNotFound):
            embed = disnake.Embed(title = '–û—à–∏–±–∫–∞!', description = f'{inter.author.mention}, –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ **`{PREFIX}—Ö–µ–ª–ø`**!', colour = botmaincolor)
            embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
            await inter.send(embed = embed)

        if isinstance(error, commands.CommandOnCooldown):
            hour = round(error.retry_after/3600)
            minute = round(error.retry_after/60)

            if hour > 0:
                embed = disnake.Embed( title = '–≠—ç—ç–º–º–º –ø–æ–ª–µ–≥—á–µ!', description = f'**–í–æ—É—É—É, –ø–æ–ª–µ–≥—á–µ {inter.author.mention}!** –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –Ω–∞—Ä—É—à–∞–µ—à—å **–∫—É–ª–¥–∞—É–Ω –∫–æ–º–∞–Ω–¥!**\n–ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ `{str(hour)}` —á–∞—Å(–æ–≤/–∞)', colour = botmaincolor)
                embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
                await inter.send(embed = embed)
            elif minute > 0:
                embed = disnake.Embed( title = '–≠—ç—ç–º–º–º –ø–æ–ª–µ–≥—á–µ!', description = f'**–í–æ—É—É—É, –ø–æ–ª–µ–≥—á–µ {inter.author.mention}!** –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –Ω–∞—Ä—É—à–∞–µ—à—å **–∫—É–ª–¥–∞—É–Ω –∫–æ–º–∞–Ω–¥!**\n–ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ `{str(minute)}` –º–∏–Ω—É—Ç(—ã)', colour = botmaincolor)
                embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
                await inter.send(embed = embed)
            else:
                embed = disnake.Embed(title = '–≠—ç—ç–º–º–º –ø–æ–ª–µ–≥—á–µ!', description = f'**–í–æ—É—É—É, –ø–æ–ª–µ–≥—á–µ {inter.author.mention}!** –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã –Ω–∞—Ä—É—à–∞–µ—à—å **–∫—É–ª–¥–∞—É–Ω –∫–æ–º–∞–Ω–¥!**\n–ü–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ `{error.retry_after :.0f}` —Å–µ–∫—É–Ω–¥(—ã)', colour = botmaincolor)
                embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
                await inter.send(embed = embed)

        if isinstance(error, commands.errors.MemberNotFound):
            embed = disnake.Embed(description = f'{inter.author.mention}, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.', colour = botmaincolor)
            embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
            await inter.send(embed = embed)

        if isinstance(error, commands.UserInputError):
            embed = disnake.Embed(title = '–û—à–∏–±–∫–∞!', description=f'**–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:** `{PREFIX}{inter.command.name}`\n**Example:** `{PREFIX}{inter.command.usage}`', colour = botmaincolor)
            embed.set_footer(text = f'{footerbyriverya4life}', icon_url =avatarbyfooterbyriverya4life)
            await inter.send(embed = embed)
    
@Bot.slash_command(name="credit", description="Credits of the bot")
async def credit(inter):
    embed = disnake.Embed (
        title="FQQDs Moderation Bot - Credits",
        description=f'Bot coded by FQQD#2557\nGithub: https://github.com/FQQD/simple-moderation-bot/\nhttps://www.FQQD.de',
        colour = defaultembedcolor
    )  
    await inter.send(embed=embed) 
    
    
@Bot.slash_command(name="avatar", description="Show and download the profile picture of a user")
async def avatar(inter, member:disnake.Member):
    embed = disnake.Embed(
        title=f"Avatar of {member.name}#{member.discriminator}",
        description=f"URL: {member.avatar.url}",
        color=defaultembedcolor,
    )
    embed.set_image(
    url=member.avatar.url,
    )
    
    embed.set_author(name=f"{member.name}" + "#"+ f"{member.discriminator}", icon_url='{}'.format(member.avatar))
    embed.set_footer(text=f"Requested by {inter.author.name}", icon_url = '{}'.format(inter.author.avatar))
    
    
    await inter.send(embed=embed)



Bot.run(bottoken)

